name: Cung c·∫•p Container Starter Mini

on:  
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Lo·∫°i h√†nh ƒë·ªông (create_container, create_new_runner, delete_container)'
        required: true
        type: choice
        options:
          - create_container  # T·∫°o container m·ªõi tr√™n Runner hi·ªán t·∫°i
          - create_new_runner # D√πng khi Bot quy·∫øt ƒë·ªãnh VPS c≈© ƒë√£ h·∫øt h·∫°n (t·∫°o container ƒë·∫ßu ti√™n tr√™n runner m·ªõi)
          - delete_container  # X√≥a container c·ª• th·ªÉ

jobs:
  provisioning:
    # ‚ö†Ô∏è B·∫ÆT BU·ªòC D√ôNG SELF-HOSTED RUNNER C·ª¶A B·∫†N (VPS Mega G·ªëc)
    runs-on: [self-hosted, linux, x64]
    
    steps:
      - name: ‚öôÔ∏è Ki·ªÉm tra lo·∫°i g√≥i v√† Chu·∫©n b·ªã
        id: prepare
        run: |
          ACTION_TYPE="${{ github.event.inputs.action_type }}"
          RUN_ID="${{ github.run_id }}"
          CONTAINER_NAME="starter-mini-$RUN_ID"
          
          echo "ACTION_TYPE=$ACTION_TYPE" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
          
          # C√†i ƒë·∫∑t Docker n·∫øu ch∆∞a c√≥ s·∫µn tr√™n Self-Hosted Runner
          sudo apt update -y
          sudo apt install docker.io -y
          
          # Log l·∫°i th√¥ng tin kh·ªüi t·∫°o
          echo "::notice::K√≠ch ho·∫°t lo·∫°i h√†nh ƒë·ªông: $ACTION_TYPE"
          
      # =========================================================
      # LOGIC T·∫†O CONTAINER M·ªöI (Ch·∫°y cho c·∫£ create_container v√† create_new_runner)
      # =========================================================
      - name: üê≥ T·∫°o v√† Ch·∫°y Container (Starter Mini)
        if: env.ACTION_TYPE == 'create_container' || env.ACTION_TYPE == 'create_new_runner'
        id: container_setup
        run: |
          # --- DOCKERFILE C·∫¨P NH·∫¨T (ƒê√£ s·ª≠a l·ªói sudo) ---
          cat <<EOF > Dockerfile
          FROM ubuntu:22.04

          # C√†i ƒë·∫∑t c√¥ng c·ª• v√† sudo
          RUN apt update && apt install -y \
              nodejs npm \
              git \
              tmate \
              sudo \
              procps \
              openssh-server \
              && apt clean

          # T·∫°o th∆∞ m·ª•c l√†m vi·ªác v√† User
          RUN useradd -m -s /bin/bash vpsuser

          # C·∫•p quy·ªÅn sudo KH√îNG c·∫ßn m·∫≠t kh·∫©u
          RUN usermod -aG sudo vpsuser
          RUN echo "vpsuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

          RUN echo "vpsuser:password" | chpasswd
          USER vpsuser
          WORKDIR /home/vpsuser
          
          CMD ["tmate", "-F"]
          EOF
          # --- END DOCKERFILE ---
          
          # X√¢y d·ª±ng image
          docker build -t starter-mini-image .

          # Ch·∫°y Container v·ªõi gi·ªõi h·∫°n 2GB RAM v√† 1 CPU core
          docker run -d \
              --cpus="1" \
              --memory="2g" \
              --name ${{ env.CONTAINER_NAME }} \
              starter-mini-image

          echo "Container ${{ env.CONTAINER_NAME }} ƒë√£ ƒë∆∞·ª£c kh·ªüi ch·∫°y. Ch·ªù Tmate..."
          sleep 15 # Ch·ªù Tmate kh·ªüi ƒë·ªông
          
      - name: üîë L·∫•y v√† Hi·ªÉn th·ªã K·∫øt n·ªëi SSH (Tmate)
        if: success() && (env.ACTION_TYPE == 'create_container' || env.ACTION_TYPE == 'create_new_runner')
        run: |
          # L·∫•y chu·ªói Tmate SSH t·ª´ logs Container
          SSH_CONNECTION=$(docker logs ${{ env.CONTAINER_NAME }} 2>&1 | grep "ssh .*@.*" | tail -n 1)

          if [ -z "$SSH_CONNECTION" ]; then
              echo "::error::Kh√¥ng l·∫•y ƒë∆∞·ª£c chu·ªói Tmate SSH. Tmate c√≥ th·ªÉ ƒë√£ th·∫•t b·∫°i khi kh·ªüi ƒë·ªông."
              exit 1
          fi

          # G·ª≠i k·∫øt qu·∫£ SSH link v·ªÅ log ƒë·ªÉ Bot Discord c√≥ th·ªÉ ƒë·ªçc qua API
          echo "================================================="
          echo "SSH_LINK_RESULT:$SSH_CONNECTION" # <-- D√πng tag n√†y ƒë·ªÉ Bot d·ªÖ d√†ng t√¨m ki·∫øm trong log
          echo "================================================="
          
          echo "::notice::Container ƒë√£ t·∫°o. K·∫øt n·ªëi: $SSH_CONNECTION"

      # =========================================================
      # LOGIC X√ìA CONTAINER (D√πng cho Bot khi h·∫øt th·ªùi gian)
      # =========================================================
      - name: üóëÔ∏è X√≥a Container
        if: env.ACTION_TYPE == 'delete_container'
        run: |
          # Bot Discord ph·∫£i truy·ªÅn t√™n Container c·∫ßn x√≥a qua Input (V√≠ d·ª•: container_name_to_delete)
          CONTAINER_TO_DELETE="${{ github.event.inputs.container_name_to_delete }}" 
          
          if [ -z "$CONTAINER_TO_DELETE" ]; then
              echo "::error::Kh√¥ng c√≥ t√™n Container ƒë·ªÉ x√≥a."
              exit 1
          fi

          echo "D·ª´ng v√† x√≥a Container $CONTAINER_TO_DELETE..."
          docker stop $CONTAINER_TO_DELETE || true # '|| true' ƒë·ªÉ tr√°nh l·ªói n·∫øu Container ch∆∞a ch·∫°y
          docker rm $CONTAINER_TO_DELETE
          echo "::notice::Container $CONTAINER_TO_DELETE ƒë√£ ƒë∆∞·ª£c x√≥a."
